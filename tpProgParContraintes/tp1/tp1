:- lib(ic).

%Question 1.1

couleurVoiture(rouge).
couleurVoiture(vert(clair)).
couleurVoiture(gris).
couleurVoiture(blanc).

couleurBateau(vert(_)).
couleurBateau(noir).
couleurBateau(blanc).


choixCouleur(CouleurBateau,CouleurVoiture) :- 	couleurVoiture(CouleurVoiture),
						couleurBateau(CouleurBateau),
						CouleurVoiture=CouleurBateau.

%Question 1.2

/* Il parcourt les branches de l'arbre des possibilités et il coupe les branches qui ne
s'unifient pas avec les contraintes.
*/

%Question 1.3

isBetween(Var,Min,_Max) :- 	Var=Min.
isBetween(Var,Min,Max) :- 	\=(Min,Max),
				is(M,Min+1),
				isBetween(Var,M,Max).
%Question 1.4

nbMaxR(10000).
nbMinR(5000).
nbMinC(9000).
nbMaxC(20000).

commande(NbResistance,NbCondensateur) :- 	nbMaxR(NbMaxR),nbMinR(NbMinR),nbMaxC(NbMaxC),nbMinC(NbMinC),
						isBetween(NbResistance,NbMinR,NbMaxR),
						isBetween(NbCondensateur,NbMinC,NbMaxC),
						NbResistance>=NbCondensateur.

%Question 1.7

commande2(NbResistance,NbCondensateur) :- 	nbMaxR(NbMaxR),nbMinR(NbMinR),nbMaxC(NbMaxC),nbMinC(NbMinC),
						NbResistance #:: NbMinR..NbMaxR,
						NbCondensateur #:: NbMinC..NbMaxC,
						NbResistance #>= NbCondensateur.

commande3(NbResistance,NbCondensateur) :- 	nbMaxR(NbMaxR),nbMinR(NbMinR),nbMaxC(NbMaxC),nbMinC(NbMinC),
						NbResistance #:: NbMinR..NbMaxR,
						NbCondensateur #:: NbMinC..NbMaxC,
						NbResistance #>= NbCondensateur,
						labeling([NbResistance,NbCondensateur]).
%Parler de la vitesse d'éxécution


%Zoologie
%Question 1.9

nbChatsMax(1000).
nbPiesMax(1000).

chapie(Chats,Pies,Pattes,Tetes) :- 	nbChatsMax(NbChatsMax),
					nbPiesMax(NbPiesMax),
					Chats #:: 0 .. NbChatsMax,
					Pies #:: 0 .. NbPiesMax,
					Pattes #= Chats*4+Pies*2,
					Tetes #= Chats+Pies,
					labeling([Chats,Pies]).
/*
[eclipse 52]: chapie(2,Pies,Pattes,5).

Pies = 3
Pattes = 14
Yes (0.00s cpu)
*/

/*
[eclipse 4]: chapie(Chats,Pies,Pattes,Tetes),Pattes#=Tetes*3.

Chats = 0
Pies = 0
Pattes = 0
Tetes = 0
Yes (0.00s cpu, solution 1, maybe more) ? ;

Chats = 1
Pies = 1
Pattes = 6
Tetes = 2
Yes (0.00s cpu, solution 2, maybe more) ? ;

Chats = 2
Pies = 2
Pattes = 12
Tetes = 4
Yes (0.00s cpu, solution 3, maybe more) ?
*/

vabs1(Val,AbsVal) :- Val#=AbsVal,
					AbsVal#>=0.
vabs1(Val,AbsVal) :- Val*(-1)#=AbsVal,
					AbsVal#>0.

vabs2(Val,AbsVal) :- 	Val#=AbsVal
						or
						Val*(-1)#=AbsVal,
						AbsVal#>=0.

faitListe([],0,_Min,_Max).
faitListe([PremElem|ResteVarListe],Taille,Min,Max) :- 	PremElem #:: Min..Max,
														indomain(PremElem),
														NewTaille #= Taille-1,
														faitListe(ResteVarListe,NewTaille,Min,Max),
														!.

faitListe2(VarListe,Taille,Min,Max) :-	dim(VarListe,[Taille]).

suite([_PremElem,_DeuxElem]).
suite([PremElem,DeuxElem,TroisElem|ResteVarListe]) :-	%faitListe([PremElem,DeuxElem,TroisElem|ResteVarListe],5,1,10),
														vabs1(DeuxElem,AbsDeuxElem),
														TroisElem #= AbsDeuxElem - PremElem,
														suite([DeuxElem,TroisElem|ResteVarListe]).